DAY 1

#1

Given a number N, find all factors of N.
Example:
N = 6 
factors = {1, 2, 3, 6}
Make sure the returned array is sorted.

vector<int> Solution::allFactors(int A) 
{
    vector<int> arr;
    for(int i=1;i<sqrt(A);i++)
    {
        if(A%i==0) 
            arr.push_back(i);
    }
    for(int i=sqrt(A);i>=1;i--)
    {
        if(A%i==0) 
            arr.push_back(A/i);
    }
    return arr;
}

#2

Given a number N, verify if N is prime or not.
Return 1 if N is prime, else return 0.
Example :
Input : 7
Output : True

int Solution::isPrime(int A) 
{
    if(A==1)
        return 0;
    int cnt=2;
    for(int i=2;i<=sqrt(A);i++)
    {
        if(A%i==0)
            cnt++;
    }
    if(cnt==2)
        return 1;
    else
        return 0;
}

OR

int Solution::isPrime(int A) 
{
  if(A==1||A==0||A%2==0) return false;
  int upperlt=sqrt(A);
  for(int i=3;i<=upperlt;i=i+2){
    if(A%i==0) return false;
    }
    return true;
}

#3

Given a number N, find all prime numbers upto N ( N included ).
Example:
if N = 7,
all primes till 7 = {2, 3, 5, 7}
Make sure the returned array is sorted.

vector Solution::sieve(int A) {
int Primes[A+1];
vector myvector;
for(int i=0;i<=A;i++){Primes[i]=1;}
Primes[0]=0;
Primes[1]=0;
for(int i=2;i<=A;i++)
{if(Primes[i]==1)
{
for(int j=2;i*j<=A;j++)
{Primes[i*j]=0;}
}
}

 for(int i=2;i<=A;i++)
  {if(Primes[i]){myvector.push_back(i);}}
  return myvector;
}

#4

Given a positive integer A, return an array of strings with all the integers from 1 to N.
But for multiples of 3 the array should have “Fizz” instead of the number.
For the multiples of 5, the array should have “Buzz” instead of the number.
For numbers which are multiple of 3 and 5 both, the array should have “FizzBuzz” instead of the number.
Look at the example for more details.
Example
A = 5
Return: [1 2 Fizz 4 Buzz]

vector<string> Solution::fizzBuzz(int A) 
{
    vector<string> v;
    for(int i=1;i<=A;i++)
    {
        if(i%3==0 && i%5==0)
        {
            v.push_back("FizzBuzz");
        }
        else if(i%3==0)
        {
            v.push_back("Fizz");
        }    
        else if(i%5==0)
        {
            v.push_back("Buzz");
        }    
        else
        {
            string st = to_string(i);
            v.push_back(st);
        }
    }
    return v;
}

#5

Given an even number ( greater than 2 ), return two prime numbers whose sum will be equal to given number.
Example:
Input : 4
Output: 2 + 2 = 4
If there are more than one solutions possible, return the lexicographically smaller solution.
If [a, b] is one solution with a <= b,
and [c,d] is another solution with c <= d, then
[a, b] < [c, d] 
If a < c OR a==c AND b < d. 

int isPrime(int n)
{
    for(int i=2;i<=sqrt(n);i++)
    {
        if(n%i==0) return false;
    }
    return true;
}

vector<int> Solution::primesum(int n) {
    vector<int> v;
    for(int i=2;i<=n/2;i++)
    {
        if( isPrime(i) && isPrime(n-i) )
        {
            v.push_back(i);
            v.push_back(n-i);
            return v;
        }
    }
}

#6

Given a number N >= 0, find its representation in binary.
Example:
if N = 6,
binary form = 110

tring Solution::findDigitsInBinary(int A) 
{
    string bin;
    int r;
    if(A==0) 
    {
        bin+='0';
        return bin;
    }
    else
    {
    while(A>0)
    {
        r=A%2;
        A=A/2;
        bin+= to_string(r);
        
    }
    reverse(bin.begin(),bin.end()); 
    return bin;
    }
}

#7

Hamming distance between two non-negative integers is defined as the number of positions at which the corresponding bits are different.
Given an array A of N non-negative integers, find the sum of hamming distances of all pairs of integers in the array. Return the answer modulo 1000000007.
Problem Constraints
1 <= |A| <= 200000
1 <= A[i] <= 109
Input Format
First and only argument is array A.
Output Format
Return one integer, the answer to the problem.
Example Input
Input 1:
A = [1]
Input 2:
A = [2, 4, 6]

int Solution::hammingDistance(const vector<int> &A) {
    int n = A.size();
    int mod = 1000000007;
    int sum = 0;
    for (int bitPosition = 0; bitPosition < 32; bitPosition++) {
        int cntBitOne = 0, cntBitZero = 0;
        for(int i = 0; i < n; i++) {
            if (A[i] & (1 << bitPosition)) cntBitOne++;
            else cntBitZero++;
        }
        sum = sum + ((2LL * cntBitOne * cntBitZero) % mod);
        if (sum >= mod) sum = sum - mod;
    }
    return sum;
}
    // int i=0;j=0;
    //brute force approach
    // int count=0;
    // for(int i=0;i<A.size();i++){
    //     for(int j=0;j<A.size();j++){
    //         if(i<j){
    //             int a=A.at(i);
    //             int b=A.at(j);
    //             int c =a^b;
    //             //count number of set bits in c
                
    //             while(c){
    //                 c=(c & c-1);
    //                 count++;
    //             }
    //             count=count%1000000007;
    //             // count=count*2;
    //         }
    //     }
    // }
    // count=count%1000000007;
    // count=count*2;
    // count=count%1000000007;


#8

Given a column title A as appears in an Excel sheet, return its corresponding column number.
Problem Constraints
1 <= |A| <= 100
Input Format
First and only argument is string A.
Output Format
Return an integer

int Solution::titleToNumber(string s) {
    int result = 0;
       for (int i = 0; i < s.size(); i++) {
               result  = result * 26 + (s[i] - 'A' + 1);
       }
       return result;

}

#9

Reverse digits of an integer.
Example1:
x = 123, return 321
Example2:
x = -123, return -321
Return 0 if the result overflows and does not fit in a 32 bit signed integer

int Solution::reverse(int A) 
{
    long long int k=0,rev=0;
    if(A<0)
    {
        k=1;
        A=-A;
    }
    while(A>0)
    {
        int r=A%10;
        rev=rev*10+r;
        A=A/10;
    }
    if(k==1)
        rev=-rev;   

    if(-2147483648 > rev)
        return 0;

    if(2147483647 < rev)
        return 0;
    return rev;
}
